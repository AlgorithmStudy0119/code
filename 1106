#include <iostream>

using namespace std;

int c, n, answer = 1000000, flag = 0;
float cost[20][2] = { 0, };
float per[20] = { 0, };

void input();
void solve();
void swap(int* a, int* b);
void quick_sort(float list[], int left, int right);
void dfs(float a, float b);

int main()
{
	input();
	solve();

	cout << answer;

	return 0;
}

void input() {
	cin >> c >> n;

	for (int i = 0; i < n; i++) {
		cin >> cost[i][0] >> cost[i][1];
		per[i] = cost[i][0] / cost[i][1];
	}

	quick_sort(per, 0, n - 1);		// 인당 비용이 가장 싼 도시가 제일 위로 오게 정렬
}

void solve() {

	dfs((float)c, 0);

}

void dfs(float a, float b) {			// a = 인구, b = 비용

	while (1) {
		if (a < 0) {
			// answer 비교 후 이전값으로 회귀
			if (answer > b) {
				answer = (int) b;
			}

			return;
		}

		a -= cost[flag][1];
		b += cost[flag][0];
		dfs(a, b);
		a += cost[flag][1];
		b -= cost[flag][0];
		flag++;

	}
}

void quick_sort(float list[], int left, int right)
{
	if (left >= right)
		return;

	int pivot = left;
	int start = left + 1;
	int end = right;

	while (start <= end)
	{
		while (list[pivot] >= list[start] && start <= right)
			start++;
		while (list[pivot] <= list[end] && end > left)
			end--;
		if (start > end)
		{
			swap(list[pivot], list[end]);
			swap(cost[pivot][0], cost[end][0]);
			swap(cost[pivot][1], cost[end][1]);
		}
		else
		{
			swap(list[start], list[end]);
			swap(cost[start][0], cost[end][0]);
			swap(cost[start][1], cost[end][1]);
		}
	}

	quick_sort(list, left, end - 1);
	quick_sort(list, end + 1, right);
}

void swap(int* a, int* b)
{
	int temp = *a;
	*a = *b;
	*b = temp;
}
